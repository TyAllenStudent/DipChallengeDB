STUDENT
StudentID PRIMARY KEY
FirstName
LastName
Email
PhoneNumber

BOOK
ISBN PRIMARY KEY
Title
YearPublished
AuthorID
AuthorFirstName
AuthorSurname
TFN

Composite entity of STUDENT and BOOK:

BORROWED
StudentID + ISBN + DateBorrowed? (PRIMARY KEY?)
DateBorrowed
DateDue

Cardinality:

Students may borrow many books

A book may be borrowed by zero OR one student

Authors may write many books (no author entity, author not primary)

DDL

CREATE TABLE [dbo].[Books]
(
	[ISBN] NVARCHAR (50) NOT NULL,
	[BookTitle] NVARCHAR(100) NOT NULL,
	[YearPublished] INT NOT NULL,
	[AuthorID] INT NOT NULL,
	CONSTRAINT PK_BOOKS PRIMARY KEY (ISBN),
	CONSTRAINT FK_AUTHORS_BOOKS FOREIGN KEY (AuthorID) REFERENCES Authors(AuthorID)
)


CREATE TABLE [dbo].[Loans]
(
	[StudentID] NVARCHAR(9) NOT NULL,
	[ISBN] NVARCHAR (50) NOT NULL,
	[DateBorrowed] DATE NOT NULL,
	CONSTRAINT PK_LOANS PRIMARY KEY (StudentID, ISBN, DateBorrowed),
	CONSTRAINT FK_LOANS_STUDENTS FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
	CONSTRAINT FK_LOANS_BOOKS FOREIGN KEY (ISBN) REFERENCES Books(ISBN)
)


CREATE TABLE [dbo].[Students]
(
	[StudentID] NVARCHAR(9) NOT NULL,
	[FirstName] NVARCHAR(50) NOT NULL,
	[LastName] NVARCHAR(50) NOT NULL,
	[Email] NVARCHAR(100) NULL,
	[PhoneNumber] NVARCHAR(12) NULL,
	CONSTRAINT PK_STUDENTS PRIMARY KEY (StudentID)
)


CREATE TABLE [dbo].[Authors]
(
	[AuthorID] INT NOT NULL,
	[AuthorFirstName] NVARCHAR(50) NOT NULL,
	[AuthorSurName] NVARCHAR(50) NOT NULL,
	[AuthorTFN] NVARCHAR(12) NOT NULL,
	CONSTRAINT PK_AUTHORS PRIMARY KEY (AuthorID)
)


Schema:

STUDENT (STUDENTID PK, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER)

BOOK (ISBN PK, TITLE, YEARPUBLISHED, AUTHORID, AUTHORFIRSTNAME, AUTHORSURNAME, AUTHORTFN)

BORROWED (STUDENTID + ISBN + DATEBORROWED PK, DATEDUE)
FOREIGN KEY STUDENTID REFERENCES STUDENT STUDENTID
FOREIGN KEY ISBN REFERENCES BOOK ISBN


DEPLPOYMENT SCRIPT:


IF '$(LoadTestData)' = 'true'

BEGIN

DELETE FROM Loans;
DELETE FROM Students;
DELETE FROM Books;
DELETE FROM Authors;

INSERT INTO STUDENTS (STUDENTID, FIRSTNAME, LASTNAME, EMAIL, PHONENUMBER) VALUES
('s12345678', 'Fred', 'Flintstone', '12345678@student.swin.edu.au', '0400 555 111'),
('s23456789', 'Barney', 'Rubble', '23456789@student.swin.edu.au', '0400 555 222'),
('s34567890', 'Bam-Bam', 'Rubble', '34567890@student.swin.edu.au', '0400 555 333');

INSERT INTO AUTHORS (AUTHORID, AUTHORFIRSTNAME, AUTHORSURNAME, AUTHORTFN) VALUES
(32567, 'Edgar', 'Codd', '150 111 222'),
(76543, 'Vinton', 'Cerf', '150 222 333'),
(12345, 'Alan', 'Turing', '150 333 444');

INSERT INTO BOOKS (ISBN, BOOKTITLE, YEARPUBLISHED, AUTHORID) VALUES
('978-3-16-148410-0', 'Relationships with Databases, the ins and outs', 1970, 32567),
('978-3-16-148410-1', 'Normalisation, how to make a database geek fit in.', 1973, 32567),
('978-3-16-148410-2', 'TCP/IP, the protocol for the masses.', 1983, 76543),
('978-3-16-148410-3', 'The Man, the Bombe, and the Enigma.', 1940, 12345);

INSERT INTO LOANS (STUDENTID, ISBN, DateBorrowed) VALUES
('s12345678', '978-3-16-148410-0', '01/10/2011'),
('s23456789', '978-3-16-148410-1', '03/30/2019');

END;